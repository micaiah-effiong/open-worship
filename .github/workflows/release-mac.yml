# This action enables building release executables/installers and can be triggered manually or by release creation.
#
# Executables are built both for releases and for manually triggered runs, uploaded to artifacts and assets.
name: Release Mac

on:
  workflow_dispatch:
  push:
    # tags:
    #   - "*"
    # branches:
    #   - build/test
    pull_request:
    merge_group:

# Incremental compilation here isn't helpful
env:
  CARGO_INCREMENTAL: 0

jobs:
  release:
    strategy:
      matrix:
        build:
          - os: macos-14
            target: aarch64-apple-darwin
            suffix: macos-aarch64-${{ github.ref_name }}
      fail-fast: false
    runs-on: ${{ matrix.build.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Install GTK4 (macOS)
        run: |
          brew install gtk4 librsvg
        if: runner.os == 'macOS'

      # On macOS, we need a proper Clang version, not Apple's custom version without wasm32 support
      - name: Install LLVM and Clang for macOS
        uses: KyleMayes/install-llvm-action@dec985c8d7b46a2f363ea1a78f660c946a3349ea # v2.0.1
        with:
          env: true
          version: 17
        if: runner.os == 'macOS'

      # Because macOS, see https://andreasfertig.blog/2021/02/clang-and-gcc-on-macos-catalina-finding-the-include-paths/
      - name: Configure C compiler macOS
        run: |
          echo "SDKROOT=$(xcrun --show-sdk-path)" >> $GITHUB_ENV
        if: runner.os == 'macOS'

      - name: Install glibtoolize (macOS)
        run: brew install libtool
        if: runner.os == 'macOS'

      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b # v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # Needed for hwloc
      - name: Install automake (macOS)
        run: brew install automake
        if: runner.os == 'macOS'

      - name: Configure cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build app (macOS, normal)
        env:
          RUSTFLAGS: ${{ matrix.build.rustflags }}
        run: cargo -Zgitoxide -Zgit build --locked -Z build-std --target ${{ matrix.build.target }} --profile production
        if: runner.os == 'macOS'

      - name: Create bundle (macOS)
        run: |
          target=${{ matrix.build.target }}
          BUNDLE_VERSION=$(cargo pkgid | cut -d "#" -f2)
          BUNDLE_BUILD=$(date +"%Y%m%d%H%M")
          APP_PREFIX=target/bundle

          function process_dependencies()
          {
            local target=$1
            local destdir=$2
            local file=$3
            local rpath=$4

            echo "Processing $file"

            local inst_prefix="$(brew --prefix)/*"

            local DEPS=$(dyld_info -dependents $file | tail -n +4)
            local process_list=""
            for dep in $DEPS; do
              if [[ $dep == $inst_prefix ]]; then
                dep_file=$(basename $dep)
                new_dep_file=$destdir/$dep_file
                if [ ! -f $new_dep_file ]; then
                  # Not exist, do copy
                  echo "  Copying $dep"
                  cp -n $dep $destdir
                fi

                # Fix the dependency
                echo "  Patching $dep"
                install_name_tool -change $dep $rpath/$dep_file $file

                # Collect list of dependencies
                process_list="$new_dep_file $process_list"
              fi
            done

            # Recursively process dependencies
            for dep in $process_list; do
              process_dependencies $target $destdir $dep $rpath
            done
          }

          # 1. Create the bundle
          mkdir -p $APP_PREFIX/$target/Openworship.app/Contents/{MacOS,Resources}
          mkdir -p $APP_PREFIX/$target/Openworship.app/Contents/Resources/{lib,share}
          cp target/$target/production/openworship $APP_PREFIX/$target/Openworship.app/Contents/MacOS

          cp res/macos/openworship.icns $APP_PREFIX/$target/Openworship.app/Contents/Resources
          cp res/macos/openworship.sh $APP_PREFIX/$target/Openworship.app/Contents/MacOS

          cp res/macos/Info.plist $APP_PREFIX/$target/Openworship.app/Contents/
          sed -i '' "s/%BUNDLE_VERSION%/$BUNDLE_VERSION/g" $APP_PREFIX/$target/Openworship.app/Contents/Info.plist
          sed -i '' "s/%BUNDLE_BUILD%/$BUNDLE_BUILD/g" $APP_PREFIX/$target/Openworship.app/Contents/Info.plist

          mkdir -p $APP_PREFIX/$target/Openworship.app/Contents/Resources/share/glib-2.0
          cp -r /opt/homebrew/share/glib-2.0/schemas $APP_PREFIX/$target/Openworship.app/Contents/Resources/share/glib-2.0

          # 2. Copy and fix dependencies
          destDir=$APP_PREFIX/$target/Openworship.app/Contents/Resources/lib
          process_dependencies $target $destDir $APP_PREFIX/$target/Openworship.app/Contents/MacOS/openworship "@executable_path/../Resources/lib"

          # 3. Copy loaders
          mkdir -p $APP_PREFIX/$target/Openworship.app/Contents/Resources/lib/gdk-pixbuf-2.0/2.10.0/loaders
          cp -r /opt/homebrew/lib/gdk-pixbuf-2.0/2.10.0/loaders/*.so $APP_PREFIX/$target/Openworship.app/Contents/Resources/lib/gdk-pixbuf-2.0/2.10.0/loaders

          # 4. Fix loaders
          for loader in $APP_PREFIX/$target/Openworship.app/Contents/Resources/lib/gdk-pixbuf-2.0/2.10.0/loaders/*.so; do
            process_dependencies $target $destDir $loader "@executable_path/../Resources/lib"
          done

          cp -r /opt/homebrew/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache $APP_PREFIX/$target/Openworship.app/Contents/Resources/lib/gdk-pixbuf-2.0/2.10.0
          sed -i '' "s|$(brew --prefix)|/Applications/Openworship.app/Contents/Resources|g" $APP_PREFIX/$target/Openworship.app/Contents/Resources/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
        if: runner.os == 'macOS'

      - name: Sign Application (macOS)
        run: |
          # echo "Importing certificate"
          # echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
          # security create-keychain -p "${{ secrets.MACOS_CERTIFICATE_PW }}" build.keychain
          # security default-keychain -s build.keychain
          # security unlock-keychain -p "${{ secrets.MACOS_CERTIFICATE_PW }}" build.keychain
          # security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PW }}" -T /usr/bin/codesign
          # security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.MACOS_CERTIFICATE_PW }}" build.keychain

          echo "Signing app"
          # Sign all libs under Resources/lib
          find target/bundle/${{ matrix.build.target }}/Openworship.app/Contents/Resources/lib '(' -name '*.dylib' -o -name '*.so' ')' -type f -exec codesign --verbose=999 --deep --force --options=runtime --entitlements res/macos/Entitlements.plist -s - {} \;

          # Sign the app
          codesign --deep --force --options=runtime --entitlements res/macos/Entitlements.plist -s - target/bundle/${{ matrix.build.target }}/Openworship.app
        # Allow code signing to fail on non-release builds and in non-autonomys repos (forks)
        continue-on-error: ${{ github.repository_owner != 'autonomys' || github.event_name != 'push' || github.ref_type != 'tag' }}
        if: runner.os == 'macOS'

      - name: Create dmg (macOS)
        run: |
          version=$(cargo pkgid | cut -d "#" -f2)
          npx appdmg@0.6.6 res/macos/spec-${{ matrix.build.target }}.json target/bundle/openworship-$version.dmg
        if: runner.os == 'macOS'

      - name: Sign and notarize dmg (macOS)
        run: |
          echo "Signing"
          version=$(cargo pkgid | cut -d "#" -f2)
          codesign --deep --force --options=runtime -s - target/bundle/openworship-$version.dmg
          echo "Notarizing"

          # Notarize the Dmg using notarytool
          # xcrun notarytool submit target/bundle/openworship-$version.dmg --apple-id "${{ secrets.MACOS_APPLE_ID }}" --password "${{ secrets.MACOS_APP_PW }}" --team-id "${{ secrets.MACOS_TEAM_ID }}" --wait
          # xcrun stapler staple target/bundle/openworship-$version.dmg
        # Allow code signing to fail on non-release builds and in non-autonomys repos (forks)
        continue-on-error: ${{ github.repository_owner != 'autonomys' || github.event_name != 'push' || github.ref_type != 'tag' }}
        if: runner.os == 'macOS'

      - name: Upload dmg to artifacts (macOS)
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.1.3
        with:
          name: openworship-${{ matrix.build.suffix }}
          path: |
            target/bundle/*.dmg
          if-no-files-found: error
        if: runner.os == 'macOS'

      # - name: Upload dmg to assets (macOS)
      #   uses: alexellis/upload-assets@13926a61cdb2cb35f5fdef1c06b8b591523236d3 # 0.4.1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     asset_paths: '["target/bundle/*.dmg"]'
      #   if: runner.os == 'macOS' && github.event_name == 'push' && github.ref_type == 'tag'
